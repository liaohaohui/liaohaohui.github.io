# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h7fVse4-bvfOQu99ZfV_F7IikF8aeWmZ
"""

#
# For R, tensorflow can be called within R using keras library
# The practical is given in ISLR2 Chapter 11.
#

import tensorflow as tf
import numpy as np
import statsmodels.api as sm

x = np.array([1, 3, 2, 5])
N = x.size
x = x.reshape((N,1))
xc = sm.add_constant(x)
y = np.array([2, 3, 1.5, 6]).reshape((N,1))
print(xc)
print(y)
m = sm.OLS(y, xc)
res = m.fit()
print(res.summary())

#
# Simple Linear Regression (y = bias + beta*x) using Tensorflow
#
# Ref: https://stackoverflow.com/questions/67095821/multiple-linear-regression-with-tensorflow
# Ref: https://stackoverflow.com/questions/37031276/how-to-make-simple-logistic-regression-in-tensorflow
#
m2 = tf.keras.Sequential([tf.keras.layers.Dense(units=1)])
m2.compile(loss=tf.losses.MeanSquaredError(), optimizer=tf.keras.optimizers.SGD(learning_rate=0.01))
m2.fit(x, y, epochs=1000, verbose=0)
# https://pyimagesearch.com/2021/05/22/visualizing-network-architectures-using-keras-and-tensorflow/
# https://github.com/christianversloot/machine-learning-articles/blob/main/how-to-visualize-a-model-with-keras.md
tf.keras.utils.plot_model(m2, 'simple_lin_reg1.png', show_shapes=True)

bias = m2.layers[0].get_weights()[1]
# beta = weights
weights = m2.layers[0].get_weights()[0].flatten()
print('Tensorflow parameters:')
print(np.round(np.append(bias, weights), 3))

#
# Logistic Regression using Tensorflow (to be added in future)
#
# Ref: https://stackoverflow.com/questions/53074657/tensorflow-probability-logistic-regression-example
# Ref: https://builtin.com/data-science/guide-logistic-regression-tensorflow-20
# Ref: https://www.tensorflow.org/guide/keras/sequential_model

